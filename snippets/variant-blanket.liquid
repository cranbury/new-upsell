
  <label class="variant__label">BLANKET TYPE: 
    <span class="variant__label-info">
      <span id="selectedFabric">Removable Cover (Two-Piece)</span>
    </span>
  </label>
  <div class="variant-input-wrap Size" data-index="option1" id="ProductSelect-{{ section_id }}-option-0">
    <div class="upsell-grid-materials variant-input " data-index="option1" data-value="Blanket + Cover" style="display: inline-flex;">
      <input type="radio" {% if product.options_with_values.first.selected_value == "Blanket + Cover" %} checked="checked" {% endif %} value="Blanket + Cover" data-index="option1" name="BlanketType[]" class="variant__input-{{ section_id }} wb-type" id="blanket-type-cover">
      <label data-color-selected="Blanket + Cover" onclick="selectType('Blanket + Cover')" onmouseover="hoverShowType('Blanket + Cover')" onmouseout="hoverCurrent()" data-type="Blanket-Type-option" style="" for="blanket-type-cover" class="variant__button-label gray-button wb-type" data-option="Blanket + Cover">
        <span class="fabric-name">BLANKET + COVER</span><span class="smaller-span">Removable Cover</span>
        </label>
    </div>


    <div class="upsell-grid-materials variant-input " data-index="option1" data-value="One-Piece" style="display: inline-flex;">
      <input type="radio" {% if product.options_with_values.first.selected_value != "Blanket + Cover" %} checked="checked" {% endif %} value="One-Piece" data-index="option1" name="BlanketType[]" class="variant__input-{{ section_id }} wb-type" id="blanket-type-one">
      <label data-color-selected="One-Piece" onclick="selectType('One-Piece')" onmouseover="hoverShowType('One-Piece')" onmouseout="hoverCurrent()" data-type="Blanket-Type-option" style="" for="blanket-type-one" class="variant__button-label gray-button wb-type" data-option="One-Piece">
        <span class="fabric-name">ONE PIECE</span><span class="smaller-span">Integrated Cover</span>
        </label>
    </div>
          
  </div>


<div class="variant-wrapper variant-wrapper--button js reorder-form-order " style="margin-bottom:25px;  ">
  <label class="variant__label" style="display:flex; justify-content: space-between; cursor:pointer;" onclick="toggleSelectedFeel()">
    <div>FILTER BY FEEL: 
      <span class="variant__label-info">
        <span id="selectedFeel">All</span>
      </span>
    </div>
                  <span class="" role="presentation" >
                <svg class="icon icon--wide icon-chevron-down" width="11" height="11" viewBox="0 0 11 11" fill="none" xmlns="http://www.w3.org/2000/svg"> 
                  <g class="footer-plus-symbol">
                    <line class="footer-vertical-line white-symbol" x1="5.5" x2="5.5" y2="11" stroke="#232323"/> 
                    <line class="white-symbol" y1="5.5" x2="11" y2="5.5" stroke="#232323"/>
                  </g> 
                </svg> 
              </span>
  </label>
  <hr>
  <div class="variant-input-wrap Size filter-by-feel" data-index="option2" style="display:none; margin-bottom: -15px; ">
    <div class="upsell-grid-materials variant-input ">
      <input name="Filter[]" class="filter" type="radio" checked="checked" value="all" id="blanket-feel-all">
      <label for="blanket-feel-all" class="variant__button-label filter gray-button" onclick="filterBlankets('All')" onmouseover="hoverShowFeel('All')" onmouseout="hoverCurrent()">
        <span class="fabric-name">ALL</span>
      </label>
    </div>
    <div class="upsell-grid-materials variant-input ">
      <input name="Filter[]" class="filter" type="radio" value="cool" id="blanket-feel-cool">
      <label for="blanket-feel-cool" class="variant__button-label filter gray-button" onclick="filterBlankets('Cool')" onmouseover="hoverShowFeel('Cool')" onmouseout="hoverCurrent()">
        <span class="fabric-name">COOL</span>
      </label>
    </div>
    <div class="upsell-grid-materials variant-input ">
      <input name="Filter[]" class="filter" type="radio" value="plush" id="blanket-feel-plush">
      <label for="blanket-feel-plush" class="variant__button-label filter gray-button" onclick="filterBlankets('Plush')" onmouseover="hoverShowFeel('Plush')" onmouseout="hoverCurrent()">
        <span class="fabric-name">PLUSH</span>
      </label>
    </div>
    <div class="upsell-grid-materials variant-input ">
      <input name="Filter[]" class="filter" type="radio" value="dual" id="blanket-feel-dual">
      <label for="blanket-feel-dual" class="variant__button-label filter gray-button" onclick="filterBlankets('Dual')" onmouseover="hoverShowFeel('Dual')" onmouseout="hoverCurrent()">
        <span class="fabric-name">DUAL</span>
      </label>
    </div>
  </div>
</div>

<div class="variant-wrapper variant-wrapper--button js  ">
  <label id="variant__label__Material" class="variant__label-size-flex variant__label" for="">
    <div>
      MATERIAL:
      <span class="variant__label-info">
        <span id="selectedMaterial">Bamboo Lyocell + Minky | Beige</span>
      </span>
    </div>
  </label>
  <div class="variant-input-wrap Color Material variant-input-wrap-multi-row" data-index="option2" name="Material" id="ProductSelect-{{ section_id }}-option-1">
    {% assign variants = product.variants | where: "available" %}
    {% assign materials = product.variants | where: "option1", product.options_with_values[0].selected_value | map: "option2"  | uniq %}
    
    {% assign product_tag = '.png' %}
    {% for variant in variants %}
      <div class="upsell-grid-materials variant-input " data-index="option2" data-value='{{ variant.option2}}' data-variant="{{ variant.id }}"
      {% if variant.option1 == product.options_with_values[0].selected_value and variant.option3 == product.options_with_values[2].selected_value %}
        style="display:inline-flex;"
      {% else %}
        style="display:none;"
      {% endif %}
      >
        <input type="radio"  class='swatch-wb variant__input-{{ section_id }} variant__input--color-swatch-{{ section_id }}'
          {% if product.options_with_values[1].selected_value == material %}
            checked="checked"
          {% endif %} 
          value="{{ variant.option2 }}" id="blanket-material-{{forloop.index}}" data-index="option2" name="Material[]">
        {% assign material_name = variant.option2 | replace: " | ", "-" | downcase | replace: ' ', '-' | replace: "-+", "" | replace: "-lyocell", ""  %}
        <label class="variant__button-label swatch-wb color-swatch  color-swatch color-swatch--{{ material_name | handle }}" data-type="Material-option" onclick="selectMaterial('{{variant.option2}}')" for="blanket-material-{{forloop.index}}" onmouseover='hoverShowMaterial({{variant | json}})'' onmouseout="hoverCurrent()"
          {% if variant.option1 == "Blanket + Cover" %}
              style="background-size:cover; background-image: url('{{ 'wb-' | append: material_name | append: '-rc' | append: product_tag | asset_url }}');">"
          {% else %}
              style="background-size:cover; background-image: url('{{ 'wb-' | append: material_name | append: '-ic' | append: product_tag | asset_url }}');">"
          {% endif %}
      </div>
    {% endfor %}
  </div>
</div>

<div id="wb-size-wrapper" class="variant-wrapper variant-wrapper--button js reorder-form-order ">
  <label id="variant__label__Size" class="variant__label-size-flex variant__label" for="">
    <div>
      SIZE:
      <span class="variant__label-info">
        <span id="selectedSize">15 lbs | 54"x72"</span>
      </span>

    </div>
          <div style="width:33%;text-align:right;">
        <!-- Trigger/Open The Size Guide Modal - modal-size-guide snippet -->
        <a id="size-guide-modal-link3" class="size-guide-link" href="#">Size Guide</a>
        {%- render 'modal-size-guide', modalId: "size-guide-modal-link3" -%}
      </div>
  </label>
  <div class="variant-input-wrap Size" data-index="option3" id="ProductSelect-{{ section_id }}-option-2">

    {% assign value = product.options_with_values[2].values[0] %}
    <div class="upsell-grid-materials variant-input " data-index="option3" data-value='{{value}}' style="display: inline-flex;">
      <input type="radio" {% if product.options_with_values[2].selected_value == value %} checked="checked" {% endif %} value='{{value}}' data-index="option3" name="Size[]" class="variant__input-{{ section_id }}" id="blanket-size-small">
      <label data-color-selected='{{value}}' onclick='selectSize(`{{value}}`)' onmouseover='hoverShowSize(`{{value}}`)' onmouseout="hoverCurrent()" data-type="Size-option" style="" for="blanket-size-small" class="variant__button-label gray-button" data-option='s'>
        <span class="fabric-name">S</span><span>8 lbs</span>
      </label>
    </div>

    {% assign value = product.options_with_values[2].values[1] %}
    <div class="upsell-grid-materials variant-input " data-index="option3" data-value='{{value}}' style="display: inline-flex;">
      <input type="radio" {% if product.options_with_values[2].selected_value == value %} checked="checked" {% endif %}  value='{{value}}' data-index="option3" name="Size[]" class="variant__input-{{ section_id }}" id="blanket-size-medium">
      <label data-color-selected='{{value}}' onclick='selectSize(`{{value}}`)' onmouseover='hoverShowSize(`{{value}}`)' onmouseout="hoverCurrent()" data-type="Size-option" style="" for="blanket-size-medium" class="variant__button-label gray-button" data-option='m'>
        <span class="fabric-name">M</span><span>15 lbs</span>
      </label>
    </div>

    {% assign value = product.options_with_values[2].values[2] %}
    <div class="upsell-grid-materials variant-input " data-index="option3" data-value='{{value}}' style="display: inline-flex;">
      <input type="radio" {% if product.options_with_values[2].selected_value == value %} checked="checked" {% endif %}  value='{{value}}' data-index="option3" name="Size[]" class="variant__input-{{ section_id }}" id="blanket-size-large">
      <label data-color-selected='{{value}}' onclick='selectSize(`{{value}}`)' onmouseover='hoverShowSize(`{{value}}`)' onmouseout="hoverCurrent()" data-type="Size-option" style="" for="blanket-size-large" class="variant__button-label gray-button" data-option='l'>
        <span class="fabric-name">L</span><span>18 lbs</span>
      </label>
    </div>

    {% assign value = product.options_with_values[2].values[3] %}
    <div class="upsell-grid-materials variant-input " data-index="option3" data-value='{{value}}' style="display: inline-flex;">
      <input type="radio" {% if product.options_with_values[2].selected_value == value %} checked="checked" {% endif %}  value='{{value}}'' value='{{value}}' data-index="option3" name="Size[]" class="variant__input-{{ section_id }}" id="blanket-size-xl">
      <label data-color-selected='{{value}}' onclick='selectSize(`{{value}}`)' onmouseover='hoverShowSize(`{{value}}`)' onmouseout="hoverCurrent()" data-type="Size-option" style="" for="blanket-size-xl" class="variant__button-label gray-button" data-option='xl'>
        <span class="fabric-name">XL</span><span>30 lbs</span>
      </label>
    </div>


  </div>
</div>

<style>
  .variant__label {
    font-weight: 600;
  }
  .variant__label__info {
    font-weight: 400;
  }
  .swatch-wb {
    height: 50px;
    width: 50px;
  }
  .smaller-span {
    text-transform: none;
  }
  #wb-size-wrapper{
    margin-top: 20px;
  }

  @media (max-width: 768px) {
    #wb-size-wrapper{
      margin-bottom: 10px;
    }
    .wb-size-wrapper{
      margin-top: 5px;
    }
    .swatch-wb {
      height: 20px;
      width: 20px;
    }
  }
  
</style>
<script>

  function userSelection(){
    let options = _opts;
    let userSelection = {};
    options.forEach(function(option) {
      let elements = document.querySelectorAll('label[data-type="'+option.replace(" ", "-")+'-option"]');
      let selected = [...elements].filter(element => element.control.checked);
      userSelection[option] = selected.length > 0 ? selected[0].control.value : 'none';
    })
    return userSelection;
  }


  function filterBlankets(category){
    $('#selectedFeel').text(category)
    // iterate through all blankets based on type selected
    let okayedSkus = {
      "all": window.availableVariants.map(variant => variant.sku),
      "plush": ['122-02', '144-02','166-02','122-04','144-04','166-04','122-05','144-05', '244-09', '266-09', '288-09', '244-05','266-05','288-05'],
      "cool": ['122-03','144-03','166-03','122-07','144-07','166-07','244-03','266-03','288-03','244-11','266-11', '288-11'],
      "dual": ['244-08', '266-08', '288-08', '244-01', '266-01', '244-07', '266-07', '288-07', '244-06', '266-06', '288-06', '122-09', '144-09', '166-09', '122-08', '144-08', '166-08' ]
    }
    let selectedType = userSelection()['Blanket Type']
    let selectedSize = userSelection()['Size']
    window.availableVariants.forEach(function(variant){
      // if matches selected type
      if (variant.option1 == selectedType && okayedSkus[category.toLowerCase()].includes(variant.sku) && variant.option3 == selectedSize){
        $(`[data-variant="${variant.id}"]`).show()
      } else {
        $(`[data-variant="${variant.id}"]`).hide()
      }
    })
  }



//touch gestures (swipe)
  // Left and right swipe on mobile size. The moveLeft and moveRight functions are in product-images
  document.querySelector('.main-carousel').addEventListener('touchstart', handleTouchStart, false);        
  document.querySelector('.main-carousel').addEventListener('touchmove', handleTouchMove, false);

  var xDown = null;                                                        
  var yDown = null;

  function getTouches(evt) {
    return evt.touches ||             // browser API
           evt.originalEvent.touches; // jQuery
  }                                                     

  function handleTouchStart(evt) {
      const firstTouch = getTouches(evt)[0];                                      
      xDown = firstTouch.clientX;                                      
      yDown = firstTouch.clientY;                                      
  }; 

  function handleTouchMove(evt) {
      if ( ! xDown || ! yDown ) {
          return;
      }

      var xUp = evt.touches[0].clientX;                                    
      var yUp = evt.touches[0].clientY;

      var xDiff = xDown - xUp;
      var yDiff = yDown - yUp;

      if ( Math.abs( xDiff ) > Math.abs( yDiff ) ) {/*most significant*/
          if ( xDiff > 0 ) {
              /* left swipe */
              dotRight()
          } else {
              /* right swipe */
              dotLeft()
          }                       
      }
      /* reset values */
      xDown = null;
      yDown = null;                                             
  };

  //get the list of all variants
  window.availableVariants = {{product.variants | where: 'available' | json}}

  // get list of all available elements for each option

  function disableSmall(){
    $('#blanket-size-small').prop('disabled', true)
    $('#blanket-size-small+label').toggleClass('disabled', true);
    $('#blanket-size-xl').prop('disabled', false)
    $('#blanket-size-xl+label').toggleClass('disabled', false);
  }

  function disableXLarge(){
    $('#blanket-size-xl').prop('disabled', true)
    $('#blanket-size-xl+label').toggleClass('disabled', true);
    $('#blanket-size-small').prop('disabled', false)
    $('#blanket-size-small+label').toggleClass('disabled', false);
  }

  function selectType(typeSelection, firstLoad){
    let targetSize
    if (typeSelection == 'Blanket + Cover'){
      if (userSelection().Size == '8 lbs | 42"x56"'){
        targetSize = '15 lbs | 54"x72"'
      }
      // disable small button
      setTimeout(function(){
        disableSmall()
        if (userSelection().Size == '8 lbs | 42"x56"'){ 
          $(`[data-color-selected='15 lbs | 54"x72"']`).click()
        }
        
      },400)
      $('#selectedFabric').text('Removable Cover (Two-Piece)')
    } else {
      if (userSelection().Size == '30 lbs | 100"x85"'){
        targetSize = '8 lbs | 42"x56"'
      }
      // enable small button
      setTimeout(function(){
        disableXLarge()
        if (userSelection().Size == '30 lbs | 100"x85"'){
          $(`[data-color-selected='8 lbs | 42"x56"']`).click()
        }
      },400)
      $('#selectedFabric').text('Integrated Cover (One-Piece)')
    }
    targetSize = targetSize || userSelection().Size
    //reset filter
    $('#blanket-feel-all').prop('checked', true)

    let reassign = false
    let first
    let matching
    // check first for old material
    let currentMaterial = firstLoad ? pageVariant.option2 : userSelection().Material

    window.availableVariants.forEach(function(variant){
      if (variant.available && variant.option1 == typeSelection && variant.option3 == targetSize){
        $(`[data-variant="${variant.id}"]`).show()
        first = first || variant
      } else {
        $(`[data-variant="${variant.id}"]`).hide()
        if ($(`[data-variant="${variant.id}"] input`).prop('checked')){
          reassign = true
        }
      }
    })
    
    if (reassign || userSelection().Material == 'none'){
      setTimeout(function(){
        let myVariant = (firstLoad ? pageVariant : first)
        $(`[data-variant="${myVariant.id}"] input`).click()
        updateCarousel(myVariant.option2, 'Material')
        window.window.activeSlide = null
      },300)
      
    }
    setTimeout(hoverCurrent, 300)
  }
  var _opts = {{product.options | json}};
  function updateCarousel(clickedOption, option){  

    if(window.screen.width < 768) {
      dotCarousel(clickedOption, option);
      return true
    }
    let labels = {[_opts[0]]: 'option1', [_opts[1]]: 'option2', [_opts[2]]: 'option3'};
    const mainSlides = [...document.querySelector('.main-carousel').children];
    const thumbSlides = [...document.querySelectorAll('.product__thumb')];

    thumbSlides.forEach(slide => slide.parentNode.parentNode.style.display = 'none');
    
    const variants = window.ourProduct.variants;
    let url = null;
    let filteredVariants = variants
    

    filteredVariants = filteredVariants.filter(variant => variant.title.includes(option == 'Material' ? clickedOption : userSelection()['Material']) && variant.hasOwnProperty('featured_media'))

    filteredVariants = filteredVariants.filter(variant => variant.title.includes(option == 'Type' ? clickedOption : userSelection()['Blanket Type']) && variant.hasOwnProperty('featured_media'))

    filteredVariants = filteredVariants.filter(variant => variant.title.includes(option == 'Size' ? clickedOption : userSelection()['Size']) && variant.hasOwnProperty('featured_media'))


    if(filteredVariants.length > 0){ 
      url = filteredVariants[filteredVariants.length - 1].featured_media.preview_image.src.split('.png')[0].split('products/')[1]
    } else {
      url = variants[0].featured_media.preview_image.src.split('.png')[0].split('products/')[1]
    }
    
    let first = true;
    let newMainIdx = 0;

    let labelImg = url.split('_')[0]

    thumbSlides.forEach(slide => {
      
      let slideHREF = slide.href.split('.png')[0].split('products/')[1]
      let slideHREFNoSize = slideHREF.split('_')[0]
      //if ( ( slideHREFNoSize.split('_')[0].includes(labelImg) && slideHREFNoSize.split('_')[0] !== labelImg ) || slideHREF.includes(url) ){
      if (slideHREFNoSize.includes(labelImg.slice(0, -1))){
        slide.parentNode.parentNode.style.display = 'inline-flex';
        if(first){
//             thumbFocus(slide)
          slide.click();
          first = false;
          newMainIdx = slide.parentNode.parentNode.dataset.index
        }
      }
    });
    
    
    mainSlides.forEach(slide => {
      slide.style.display = 'none';
      let img = slide.firstElementChild.firstElementChild.firstElementChild;
      img.style.opacity = 0;
      img.classList.remove('lazyautosizes')
      img.classList.remove('lazyloaded')
      if(slide.dataset.index === newMainIdx){
        slide.style.display = 'block';
        img.style.opacity = 1;
        img.classList.add('lazyautosizes')
        img.classList.add('lazyloaded')
      }
    })
  }


  function dotCarousel(clickedOption, option){
      let labels = {[_opts[0]]: 'option1', [_opts[1]]: 'option2', [_opts[2]]: 'option3'};
      const mainSlides = [...document.querySelector('.main-carousel').children];
      const dotSlides = [...document.querySelectorAll('.dot-carousel')];
      
      dotSlides.forEach(dot => dot.style.display = 'none');
      
      const variants = window.ourProduct.variants;
      filteredVariants = variants
      let url = null;
      
      filteredVariants = filteredVariants.filter(variant => variant.title.includes(option == 'Material' ? clickedOption : userSelection()['Material']) && variant.hasOwnProperty('featured_media'))

      filteredVariants = filteredVariants.filter(variant => variant.title.includes(option == 'Type' ? clickedOption : userSelection()['Blanket Type']) && variant.hasOwnProperty('featured_media'))

      filteredVariants = filteredVariants.filter(variant => variant.title.includes(option == 'Size' ? clickedOption : userSelection()['Size']) && variant.hasOwnProperty('featured_media'))

      if(filteredVariants.length > 0){ 
        url = filteredVariants[0].featured_media.preview_image.src.split('.png')[0].split('products/')[1]
      } else {
        url = variants[0].featured_media.preview_image.src.split('.png')[0].split('products/')[1]
      }

      let first = true;
      let newMainIdx = 0; 
      
      let labelImg = url.split('_')[0]
      let slidesFiltered = dotSlides.filter(dot => {
        
        let slideHREF = dot.dataset.img.split('.png')[0].split('products/')[1]
        let slideHREFNoSize = slideHREF.split('_')[0]
        
        if (slideHREFNoSize.includes(labelImg.slice(0, -1))){
          dot.style.display = 'block';
          if(first){
            dot.click();
            dot.classList.add('dot-picked');
            first = false;
            newMainIdx = dot.dataset.index
          }
          return true;
        }
      });
	
      if (slidesFiltered.length === 1) {
        slidesFiltered[0].style.visibility = "hidden"
      }
      
      mainSlides.forEach(slide => {
      	slide.style.display = 'none';
        let img = slide.firstElementChild.firstElementChild.firstElementChild;
        img.style.opacity = 0;
        img.classList.remove('lazyautosizes')
        img.classList.remove('lazyloaded')
        if(slide.dataset.index === newMainIdx){
       	  slide.style.display = 'block';
          img.style.opacity = 1;
          img.classList.add('lazyautosizes')
          img.classList.add('lazyloaded')
        }
      
      })
    }

  function toggleSelectedFeel(){
    $('.filter-by-feel').toggle()
    $('.footer-vertical-line').toggle()
  }


  function selectSize(val){
    document.getElementById('selectedSize').innerText = val
    //event.preventDefault()
  }

  function selectMaterial(val){
    setTimeout(function(){
      if (userSelection()['Blanket Type'] == 'Blanket + Cover'){
        disableSmall()
      } else {
        disableXLarge()
      }
    },300)

    window.activeSlide = null
    document.getElementById('selectedMaterial').innerText = val
    updateCarousel(val, 'Material')
  }

  function hoverCurrent(){
    let selection = userSelection()
    let typeSelection = selection['Blanket Type']
    hoverShowType(typeSelection)
    $("#selectedMaterial").text(selection.Material)
    $("#selectedSize").text(selection.Size)
    let feel = $('.filter:checked').val()
    $("#selectedFeel").text(feel.charAt(0).toUpperCase() + feel.slice(1))
    if (window.activeSlide){
      showImage(window.activeSlide)
    }
  }

  function hoverShowType(typeSelection){
    if (typeSelection == 'Blanket + Cover'){
      $('#selectedFabric').text('Removable Cover (Two-Piece)')
    } else {
      $('#selectedFabric').text('Integrated Cover (One-Piece)')
    }
  }

  function hoverShowMaterial(variant){
    $("#selectedMaterial").text(variant.option2)
    //save current selected 
    
    // go through thumb slides and show the first of the hovered variant
    let imgAvailable = imageAvailable(variant.option2, variant.option1)
    var slideToShow = document.querySelector(`img[data-photoswipe-src="${imgAvailable}"]`);

    window.activeSlide = document.querySelector('img.lazyautosizes.lazyautosizes');

    showImage(slideToShow)

  }


  function showImage(slideToShow){
    const mainSlides = [...document.querySelector('.main-carousel').children];

    mainSlides.forEach(slide => {
      slide.style.display = 'none';
      let img = slide.firstElementChild.firstElementChild.firstElementChild;
      img.style.opacity = 0;
      img.classList.remove('lazyautosizes')
      img.classList.remove('lazyloaded')
    })   

    slideToShow.classList.add('lazyautosizes')
    slideToShow.classList.add('lazyloaded');
    slideToShow.style.opacity = 1;
    slideToShow.parentNode.parentNode.parentNode.style.display = 'block'
  }

  function imageAvailable(material, type){
    const variants = window.ourProduct.variants;
    let materialAvailable = variants.filter(variant => variant.option2 === material && variant.option1 == type && variant.hasOwnProperty('featured_media'));

    if(materialAvailable.length > 0){
      return materialAvailable[0].featured_media.preview_image.src.split('https:')[1].split('.png').join('_1800x1800.png')
    } else {
      return variants[0].featured_media.preview_image.src.split('https:')[1].split('.png').join('_1800x1800.png')
    }
  }

  function hoverShowSize(sizeSelection){
    $("#selectedSize").text(sizeSelection)
  } 

  function hoverShowFeel(feelSelection){
    $("#selectedFeel").text(feelSelection)
  } 
  function params(){
    return new Proxy(new URLSearchParams(window.location.search), {
      get: (searchParams, prop) => searchParams.get(prop),
    });
  }
  pageVariant = availableVariants.filter(vari => vari.id == params().variant)[0]
  selectType(userSelection()['Blanket Type'], true)
  
  // updateCarousel(pageVariant.option2, 'Material')
  //selectMaterial(pageVariant.option2)
  
</script>
